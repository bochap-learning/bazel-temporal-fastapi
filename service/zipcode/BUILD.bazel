load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@aspect_rules_py//py:defs.bzl", "py_library", "py_binary")
load("@rules_oci//oci:defs.bzl", "oci_load")
load("@third_party_deps//:requirements.bzl", "requirement")
load("//:py_layer.bzl", "py_oci_image")
load("//tools/runner:defs.bzl", "pytest_runner")

py_library(
    name = "service_zipcode_shared",
    srcs = ["model.py", "shared.py"],
    deps = [],
    visibility = ["//visibility:public"]
)

py_library(
    name = "service_zipcode_workflow",
    srcs = ["workflow.py"],
    deps = [
        requirement("aiohttp"),
        requirement("temporalio"),
        requirement("psycopg2-binary"),
        "//library/meta:library_meta",
        "//library/converter:library_converter",
        "//library/orchestration:library_orchestration",
        "//library/storage:library_rdbms",
        "//library/storage:library_blob",
        "//library/webclient:library_webclient",        
        "//service/patient:service_patient_workflow",
        "//service/observation:service_observation_workflow",
        ":service_zipcode_shared",
    ],
    visibility = ["//visibility:public"]
)

# remove workflow testing since minio needs to be both localhost and minio 
# since it is access from both localhost and the docker environment
# pytest_runner(
#     name = "service_zipcode_workflow_test",
#     srcs = [
#         "workflow_test.py",
#     ],
#     deps = [
#         requirement("pytest-asyncio"),
#         "//library/meta:library_meta",
#         "//library/client:library_client",
#         "//library/storage:library_vault",
#         ":service_zipcode_workflow"
#     ],
# )

py_binary(
    name = "service_zipcode_workflow_worker",
    srcs = ["worker.py"],
    main = "worker.py",
    deps = [
        requirement("temporalio"),
        "//library/orchestration:library_orchestration",
        "//library/meta:library_meta",
        "//library/client:library_client",
        "//library/storage:library_vault",
        "//library/storage:library_rdbms",
        "//library/storage:library_blob",
        ":service_zipcode_workflow"  
    ],
)

py_oci_image(
    name = "service_zipcode_workflow_worker_oic_image",
    base = "@ubuntu",
    binary = "service_zipcode_workflow_worker",
    entrypoint = ["/service/zipcode/service_zipcode_workflow_worker"],
)

platform(
    name = "aarch64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

platform(
    name = "x86_64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

platform_transition_filegroup(
    name = "service_zipcode_workflow_worker_image",
    srcs = [":service_zipcode_workflow_worker_oic_image"],
    target_platform = select({
        "@platforms//cpu:arm64": ":aarch64_linux",
        "@platforms//cpu:x86_64": ":x86_64_linux",
    }),
)

oci_load(
    name = "service_zipcode_workflow_worker_load",
    image = ":service_zipcode_workflow_worker_image",
    repo_tags = ["gcr.io/oci_python_service_zipcode_workflow_worker:latest"],
)