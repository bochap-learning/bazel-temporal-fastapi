services:
  api_db:
    container_name: api-db
    build: ./postgres-with-curl
    restart: always  # Always restart the container if it stops
    environment:
      POSTGRES_USER: ${APIPOSTGRES_USER}                   # Set the PostgreSQL username
      POSTGRES_PASSWORD: ${APIPOSTGRES_PASSWORD}           # Set the PostgreSQL password
      POSTGRES_DB:  ${APIPOSTGRES_DB}                      # Set the default database name
    ports:
      - "${APIPOSTGRES_PORT}:5432"  # Map port 5432 on the host to port 5432 in the container
    volumes:
      - api-postgres:/var/lib/postgresql/data  # Persist data even if the container is removed
    depends_on:
      - minio      
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - 5050:80
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULTEMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULTPASSWORD}
  minio:
    image: minio/minio:latest
    command: server /data --address ":${MINIO_HTTPPORT}" --console-address ":${MINIO_CONSOLEPORT}"
    ports:
      - "${MINIO_HTTPPORT}:9000"
      - "${MINIO_CONSOLEPORT}:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 1s
    restart: always          
  mc:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    network_mode: service:minio
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://localhost:${MINIO_HTTPPORT} ${MINIO_USER} ${MINIO_PASSWORD};
      mc mb --ignore-existing myminio/${MINIO_BUCKET};
      mc anonymous set public myminio/${MINIO_BUCKET};
      "
  temporal_db:
    container_name: temporalpostgresql
    restart: always  # Always restart the container if it stops
    environment:
      POSTGRES_USER: ${TEMPORALPOSTGRES_USER}
      POSTGRES_PASSWORD: ${TEMPORALPOSTGRES_PASSWORD}
      POSTGRES_DB:  ${TEMPORALPOSTGRES_DB}
    image: postgres:latest
    ports:
      - ${TEMPORALPOSTGRES_PORT}:5432
    volumes:
      - temporal-postgresql:/var/lib/postgresql/data
  temporal:
    container_name: temporal
    depends_on:
      - temporal_db
    environment:
      - DB=postgres12
      - DB_PORT=5432        # port access in docker enviroment not host environment
      - POSTGRES_USER=${TEMPORALPOSTGRES_USER}
      - POSTGRES_PWD=${TEMPORALPOSTGRES_PASSWORD}
      - POSTGRES_SEEDS=temporal_db
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    image: temporalio/auto-setup:latest
    ports:
      - ${TEMPORAL_CONSOLEPORT}:7233
    volumes:
      - ./temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=${TEMPORAL_HOST}:${TEMPORAL_CONSOLEPORT}
      - TEMPORAL_CLI_ADDRESS=${TEMPORAL_HOST}:${TEMPORAL_CONSOLEPORT}
    image: temporalio/admin-tools:latest
    stdin_open: true
    tty: true
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=${TEMPORAL_HOST}:${TEMPORAL_CONSOLEPORT}
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:latest
    ports:
      - ${TEMPORAL_UIPORT}:8080
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    ports:
      - "${VAULT_PORT}:8200"
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN}
      - VAULT_ADDR=http://localhost:${VAULT_PORT}
    volumes:
      - vault-data:/vault/data
  vault-seed:
    build: ./vault-seed
    depends_on:
      - vault    
    command: python run.py
volumes:
  api-postgres:
  minio-data:
  pgadmin-data:
  temporal-postgresql:
  vault-data:
  